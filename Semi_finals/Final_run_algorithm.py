# Summary of Key Features
# ✅ Uses Dijkstra’s algorithm to find the shortest path between any two points.
# ✅ Determines the optimal order to visit all green agents.
# ✅ Ensures the robot returns to the starting position.
# ✅ Skips unreachable cells to prevent errors.
# ✅ Computes total travel cost based on cell costs.


def finalRun(maze, start, greenAgents):
    import heapq

    def dijkstra(maze, start, goal):
        rows, cols = len(maze), len(maze[0])
        directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]  # N, E, S, W
        pq = [(0, start)]  # Priority queue (cost, (x, y))
        costs = {start: 0}
        prev = {start: None}

        while pq:
            current_cost, (x, y) = heapq.heappop(pq)

            if (x, y) == goal:
                break

            for i, (dx, dy) in enumerate(directions):
                nx, ny = x + dx, y + dy

                if 0 <= nx < rows and 0 <= ny < cols and maze[x][y][i] == 0:  # No wall in this direction
                    new_cost = current_cost + maze[nx][ny][4]  # Add cell cost
                    if (nx, ny) not in costs or new_cost < costs[(nx, ny)]:
                        costs[(nx, ny)] = new_cost
                        prev[(nx, ny)] = (x, y)
                        heapq.heappush(pq, (new_cost, (nx, ny)))

        # Reconstruct path
        path = []
        node = goal

        if node not in prev:
            return []  # No path found

        while node is not None:
            path.append(node)
            node = prev[node]

        path.reverse()
        return path

    def solve_maze(maze, start, green_cells):
        order = [start]
        unvisited = set(green_cells)
        current = start
        final_path = []

        while unvisited:
            reachable = [(cell, dijkstra(maze, current, cell)) for cell in unvisited]
            reachable = [(cell, path) for cell, path in reachable if path]  # Exclude unreachable

            if not reachable:
                break  # Stop if no reachable cells

            next_goal = min(reachable, key=lambda x: len(x[1]))[0]  # Choose shortest path
            order.append(next_goal)
            unvisited.remove(next_goal)
            current = next_goal

        order.append(start)  # Return to start

        for i in range(len(order) - 1):
            path = dijkstra(maze, order[i], order[i + 1])
            if not path:
                continue  # Skip if no path is found
            final_path.extend(path[:-1])

        final_path.append(start)
        return final_path

    solution_path = solve_maze(maze, start, greenAgents)
    total_cost = sum(maze[x][y][4] for x, y in solution_path)

    return solution_path, total_cost

# Give attributes to final run fuction as following

# Sample Maze (20x20 maze with 5 attributes to each cell (4 walls nesw and cost of the cell))
maze = [
        [[1, 0, 0, 1, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [1, 0, 0, 0, 0], [1, 1, 0, 0, 0], [1, 0, 0, 1, 0], [1, 1, 0, 0, 0], [1, 0, 1, 1, 0], [1, 0, 0, 0, 0], [1, 1, 0, 0, 0], [1, 0, 1, 1, 0], [1, 0, 1, 0, 0], [1, 0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0]],
        [[0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 0, 0, 0, 0], [1, 1, 0, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0]],
        [[0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 1, 1, 0], [1, 0, 0, 0, 0], [1, 1, 0, 0, 0], [1, 0, 0, 1, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 0, 1, 1, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 0, 1, 0], [1, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 1, 1, 0, 0]],
        [[0, 1, 0, 1, 0], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [1, 1, 0, 1, 0], [0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 0, 0], [0, 1, 1, 1, 0], [1, 0, 0, 1, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0]],
        [[0, 0, 0, 1, 0], [1, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [1, 0, 0, 0, 0], [1, 1, 0, 0, 0], [0, 1, 1, 1, 10], [0, 0, 1, 1, 10], [0, 1, 1, 0, 10], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [0, 1, 1, 0, 0], [1, 0, 1, 1, 0], [0, 1, 1, 0, 0]],
        [[0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 1, 1, 0, 10], [1, 0, 0, 1, 40], [1, 0, 1, 0, 10], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [0, 0, 1, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 1, 0, 0, 0], [1, 0, 0, 1, 0], [1, 1, 0, 0, 0]],
        [[1, 0, 0, 1, 0], [1, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [1, 1, 0, 0, 0], [1, 0, 0, 1, 10], [0, 0, 1, 0, 10], [1, 0, 1, 0, 10], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 1, 0, 0, 0], [1, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 1, 0]],
        [[0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 1, 1, 0, 0], [1, 0, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 1, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 1, 0, 0, 0], [1, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [1, 0, 0, 0, 0], [0, 1, 1, 0, 0]],
        [[0, 1, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 1, 1, 0, 0], [1, 0, 0, 1, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 1, 1, 0, 10], [1, 0, 0, 1, 10], [1, 1, 0, 0, 10], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0]],
        [[1, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 0], [1, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [0, 1, 1, 0, 0], [1, 0, 0, 1, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 10], [0, 1, 1, 0, 40], [0, 1, 0, 1, 10], [1, 1, 0, 1, 0], [0, 1, 0, 1, 0]],
        [[0, 0, 0, 1, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 1, 1, 0], [0, 0, 0, 0, 0], [1, 1, 1, 0, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [1, 1, 0, 1, 0], [0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [1, 0, 0, 0, 0], [1, 0, 0, 0, 10], [1, 0, 0, 0, 10], [0, 1, 1, 0, 10], [0, 0, 1, 1, 0], [0, 1, 0, 0, 0]],
        [[0, 0, 0, 1, 0], [1, 1, 0, 0, 0], [1, 0, 1, 1, 0], [1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [1, 0, 0, 0, 0], [0, 1, 1, 0, 0], [0, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 0, 0], [1, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [0, 1, 0, 0, 0]],
        [[0, 1, 0, 1, 0], [0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 1, 0], [0, 0, 1, 0, 0], [1, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [0, 0, 0, 0, 0], [0, 1, 1, 0, 0], [0, 1, 0, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 0, 0], [1, 0, 1, 1, 0], [0, 1, 0, 0, 0]],
        [[0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [1, 1, 1, 0, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [1, 0, 0, 1, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [1, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 1, 0], [1, 1, 0, 0, 0], [0, 1, 1, 1, 0]],
        [[0, 1, 0, 1, 0], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 10], [0, 0, 0, 1, 10], [0, 0, 1, 0, 10], [0, 0, 1, 0, 0], [0, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 0, 0, 1, 0], [1, 0, 1, 0, 0], [1, 0, 0, 0, 0], [0, 1, 1, 0, 0], [1, 0, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [1, 1, 0, 0, 0]],
        [[0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [1, 0, 0, 0, 10], [0, 1, 1, 0, 40], [1, 0, 0, 1, 10], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 0], [0, 0, 0, 1, 0], [1, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [0, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 1, 0, 0], [1, 1, 0, 0, 0], [0, 1, 1, 1, 0]],
        [[1, 1, 0, 1, 0], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 0, 1, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 10], [1, 1, 0, 1, 10], [0, 0, 0, 1, 10], [1, 0, 0, 0, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 1, 0, 0, 0], [1, 1, 0, 1, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 1, 0, 1, 0], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0]],
        [[0, 0, 1, 1, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 0, 1, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 1, 0, 0, 0], [0, 1, 1, 1, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0]],
        [[1, 1, 0, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 1, 0], [0, 0, 1, 1, 0], [1, 1, 0, 0, 0], [0, 1, 0, 1, 0], [1, 1, 0, 1, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0], [1, 0, 0, 1, 0], [0, 1, 0, 0, 0], [1, 0, 0, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 1, 0], [1, 1, 0, 1, 0]],
        [[0, 0, 1, 1, 0], [0, 0, 1, 0, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [1, 0, 1, 0, 0], [1, 0, 1, 0, 0], [1, 1, 0, 0, 0], [1, 0, 1, 1, 0], [0, 0, 1, 0, 0], [1, 0, 1, 0, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0], [0, 0, 1, 0, 0], [1, 0, 1, 0, 0], [0, 0, 1, 0, 0], [0, 1, 1, 0, 0]]
    ]

start = (19 ,10) #Starting position
green_cells = [(18, 6), (8, 7), (7, 14)] #3 green agent

(path,cost)=finalRun(start=start,maze=maze,greenAgents=green_cells)  # Call the fuction using above examples
print(path)
print(cost)